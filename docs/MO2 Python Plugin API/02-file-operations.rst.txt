File Operations and Data Structures
====================================

This section covers file handling, data structures, and archive management in the MO2 Python API.

.. py:class:: FileInfo

   Information about a virtualized file


   .. py:property:: archive
      :type: str



   .. py:property:: filePath
      :type: str



   .. py:property:: origins
      :type: list[str]



.. py:class:: FileTreeEntry

   Represent an entry in a file tree, either a file or a directory. This class
   inherited by IFileTree so that operations on entry are the same for a file or
   a directory.

   This class provides convenience methods to query information on the file, like its
   name or the its last modification time. It also provides a convenience astree() method
   that can be used to retrieve the tree corresponding to its entry in case the entry
   represent a directory.


   .. py:class:: FileTypes(*args, **kwds)

      Bases: :py:obj:`enum.Enum`


      Enumeration of the different file type or combinations.


      .. py:attribute:: DIRECTORY
         :value: Ellipsis



      .. py:attribute:: FILE
         :value: Ellipsis



      .. py:attribute:: FILE_OR_DIRECTORY
         :value: Ellipsis



      .. py:property:: name
         :type: str

         The name of the Enum member.


      .. py:property:: value
         :type: int

         The value of the Enum member.



   .. py:method:: detach() -> bool

      Detach this entry from its parent tree.

      :returns: True if the entry was removed correctly, False otherwise.



   .. py:method:: fileType() -> FileTreeEntry

      :returns: The filetype of this entry.



   .. py:method:: hasSuffix(suffixes: Sequence[str]) -> bool
                  hasSuffix(suffix: str) -> bool

      Check if this entry has the given suffix.

      :param suffix: Suffix to check.

      :returns: True if this entry is a file and has the given suffix.



   .. py:method:: isDir() -> bool

      :returns: True if this entry is a directory, False otherwise.



   .. py:method:: isFile() -> bool

      :returns: True if this entry is a file, False otherwise.



   .. py:method:: moveTo(tree: IFileTree) -> bool

      Move this entry to the given tree.

      :param tree: The tree to move this entry to.

      :returns: True if the entry was moved correctly, False otherwise.



   .. py:method:: name() -> str

      :returns: The name of this entry.



   .. py:method:: parent() -> IFileTree | None

      :returns: The parent tree containing this entry, or a `None` if this entry is the root

      or the parent tree is unreachable.



   .. py:method:: path(sep: str = '\\') -> str

      Retrieve the path from this entry up to the root of the tree.

      This method propagate up the tree so is not constant complexity as
      the full path is never stored.

      :param sep: The type of separator to use to create the path.

      :returns: The path from this entry to the root, including the name of this entry.



   .. py:method:: pathFrom(tree: IFileTree, sep: str = '\\') -> str

      Retrieve the path from the given tree to this entry.

      :param tree: The tree to reach, must be a parent of this entry.
      :param sep: The type of separator to use to create the path.

      :returns: The path from the given tree to this entry, including the name of this entry, or

      an empty string if the given tree is not a parent of this entry.



   .. py:method:: suffix() -> str

      Retrieve the "last" extension of this entry.

      The "last" extension is everything after the last dot in the file name.

      :returns: The last extension of this entry, or an empty string if the file has no extension

      or is directory.



   .. py:attribute:: DIRECTORY
      :type:  FileTreeEntry.FileTypes
      :value: Ellipsis



   .. py:attribute:: FILE
      :type:  FileTreeEntry.FileTypes
      :value: Ellipsis



   .. py:attribute:: FILE_OR_DIRECTORY
      :type:  FileTreeEntry.FileTypes
      :value: Ellipsis


.. py:class:: IFileTree

   Bases: :py:obj:`FileTreeEntry`


   Interface to classes that provides way to visualize and alter file trees. The tree
   may not correspond to an actual file tree on the disk (e.g., inside an archive,
   from a QTree Widget, ...).

   Read-only operations on the tree are thread-safe, even when the tree has not been populated
   yet.

   In order to prevent wrong usage of the tree, implementing classes may throw
   UnsupportedOperationException if an operation is not supported. By default, all operations
   are supported, but some may not make sense in many situations.

   The goal of this is not reflect the change made to a IFileTree to the disk, but child
   classes may override relevant methods to do so.

   The tree is built upon FileTreeEntry. A given tree holds shared pointers to its entries
   while each entry holds a weak pointer to its parent, this means that the descending link
   are strong (shared pointers) but the uplink are weak.

   Accessing the parent is always done by locking the weak pointer so that returned pointer
   or either null or valid. This structure implies that as long as the initial root lives,
   entry should not be destroyed, unless the entry are detached from the root and no shared
   pointers are kept.

   However, it is not guarantee that one can go up the tree from a single node entry. If the
   root node is destroyed, it will not be possible to go up the tree, even if we still have
   a valid shared pointer.


   .. py:class:: InsertPolicy(*args, **kwds)

      Bases: :py:obj:`enum.Enum`


      .. py:attribute:: FAIL_IF_EXISTS
         :value: Ellipsis



      .. py:attribute:: MERGE
         :value: Ellipsis



      .. py:attribute:: REPLACE
         :value: Ellipsis



   .. py:class:: WalkReturn(*args, **kwds)

      Bases: :py:obj:`enum.Enum`


      Enumeration that can be returned by the callback for the `walk()` method to stop the
      walking operation early.


      .. py:attribute:: CONTINUE
         :value: Ellipsis



      .. py:attribute:: SKIP
         :value: Ellipsis



      .. py:attribute:: STOP
         :value: Ellipsis



   .. py:method:: __bool__() -> bool

      :returns: True if this tree is not empty, False otherwise.



   .. py:method:: __getitem__(index: int) -> FileTreeEntry

      Retrieve the entry at the given index in this tree.

      :param index: Index of the entry to retrieve, must be less than the size.

      :returns: The entry at the given index.

      :raises IndexError: If the given index is not in range for this tree.



   .. py:method:: __iter__() -> Iterator[FileTreeEntry]

      Retrieves an iterator for entries directly under this tree.

      This method does not recurse into subtrees, see `walk()` for this.

      :returns: An iterator object that can be used to iterate over entries in this tree.



   .. py:method:: __len__() -> int

      :returns: The number of entries directly under this tree.



   .. py:method:: addDirectory(path: str) -> IFileTree

      Create a new directory tree under this tree.

      This method will create missing folders in the given path and will
      not fail if the directory already exists but will fail if the given
      path contains "." or "..".
      This method invalidates iterators to this tree and all the subtrees
      present in the given path.

      :param path: Path to the directory to create.

      :returns: An IFileTree corresponding to the created directory.

      :raises RuntimeError: If the directory could not be created.



   .. py:method:: addFile(path: str, replace_if_exists: bool = False) -> FileTreeEntry

      Create a new file directly under this tree.

      This method will fail if the file already exists and `replace_if_exists` is `False`.
      This method invalidates iterators to this tree and all the subtrees present in the
      given path.

      :param path: Path to the file to create.
      :param replace_if_exists: If True and an entry already exists at the given location, it will be replaced by
                                a new entry. This will replace both files and directories.

      :returns: A FileTreeEntry corresponding to the created file.

      :raises RuntimeError: If the file could not be created.



   .. py:method:: clear() -> bool

      Delete (detach) all the entries from this tree.

      This method will go through the entries in this tree and stop at the first
      entry that cannot be deleted, this means that the tree can be partially cleared.

      :returns: True if all entries have been detached, False otherwise.



   .. py:method:: copy(entry: FileTreeEntry, path: str = '', insert_policy: IFileTree = InsertPolicy.FAIL_IF_EXISTS) -> FileTreeEntry

      Copy the given entry to the given path under this tree.

      The entry must not be a parent tree of this tree. This method can also be used
      to rename entries.

      If the insert policy if FAIL_IF_EXISTS, the call will fail if an entry
      at the same location already exists. If the policy is REPLACE, an existing
      entry will be replaced. If MERGE, the entry will be merged with the existing
      one (if the entry is a file, and a file exists, the file will be replaced).

      This method invalidates iterator to this tree, to the parent tree of the given
      entry, and to subtrees of this tree if the insert policy is MERGE.

      :param entry: Entry to copy.
      :param path: The path to copy the entry to. If the path ends with / or \, the entry will
                   be copied in the corresponding directory instead of replacing it. If the
                   given path is empty (`""`), the entry is copied directly under this tree.
      :param insert_policy: Policy to use to resolve conflicts.

      :returns: The new entry (copy of the specified entry).

      :raises RuntimeError: If the entry could not be copied.



   .. py:method:: createOrphanTree(name: str = '') -> IFileTree

      Create a new orphan empty tree.

      :param name: Name of the tree.

      :returns: A new tree without any parent.



   .. py:method:: exists(path: str, type: FileTreeEntry = FileTreeEntry.FileTypes.FILE_OR_DIRECTORY) -> bool

      Check if the given entry exists.

      :param path: Path to the entry, separated by / or \.
      :param type: The type of the entry to check.

      :returns: True if the entry was found, False otherwise.



   .. py:method:: find(path: str, type: FileTreeEntry = FileTreeEntry.FileTypes.FILE_OR_DIRECTORY) -> IFileTree | FileTreeEntry | None

      Retrieve the given entry.

      If no entry exists at the given path, or if the entry is not of the right
      type, `None` is returned.

      :param path: Path to the entry, separated by / or \.
      :param type: The type of the entry to check.

      :returns: The entry at the given location, or `None` if the entry was not found or

      was not of the correct type.



   .. py:method:: insert(entry: FileTreeEntry, policy: IFileTree = InsertPolicy.FAIL_IF_EXISTS) -> bool

      Insert the given entry in this tree, removing it from its
      previous parent.

      The entry must not be this tree or a parent entry of this tree.

        - If the insert policy if `FAIL_IF_EXISTS`, the call will fail if an entry
          with the same name already exists.
        - If the policy is `REPLACE`, an existing entry will be replaced by the given entry.
        - If the policy is `MERGE`:

          - If there is no entry with the same name, the new entry is inserted.
          - If there is an entry with the same name:

            - If both entries are files, the old file is replaced by the given entry.
            - If both entries are directories, a merge is performed as if using merge().
            - Otherwise the insertion fails (two entries with different types).

      This method invalidates iterator to this tree, to the parent tree of the given
      entry, and to subtrees of this tree if the insert policy is MERGE.

      :param entry: Entry to insert.
      :param policy: Policy to use to resolve conflicts.

      :returns: True if the entry was insert, False otherwise.



   .. py:method:: merge(other: IFileTree, overwrites: bool = False) -> Union[dict[FileTreeEntry, FileTreeEntry], int]

      Merge the given tree with this tree, i.e., insert all entries
      of the given tree into this tree.

      The tree must not be this tree or a parent entry of this tree. Files present in both tree
      will be replaced by files in the given tree. After a merge, the source tree will be
      empty but still attached to its parent.

      If `overwrites` is `True`, a map from overridden files to new files will be returned.

      Note that the merge process makes no distinction between files and directories
      when merging: if a directory is present in this tree and a file from source
      is in conflict with it, the tree will be removed and the file inserted; if a file
      is in this tree and a directory from source is in conflict with it, the file will
      be replaced with the directory.

      This method invalidates iterators to this tree, all the subtrees under this tree
      present in the given path, and all the subtrees of the given source.

      :param other: Tree to merge.
      :param overwrites: If True, a mapping from overridden files to new files will be returned.

      :returns: If `overwrites` is True, a mapping from overridden files to new files, otherwise

      the number of overwritten entries.

      :raises RuntimeError: If the merge failed.



   .. py:method:: move(entry: FileTreeEntry, path: str, policy: IFileTree = InsertPolicy.FAIL_IF_EXISTS) -> bool

      Move the given entry to the given path under this tree.

      The entry must not be a parent tree of this tree. This method can also be used
      to rename entries.

      If the insert policy if FAIL_IF_EXISTS, the call will fail if an entry
      at the same location already exists. If the policy is REPLACE, an existing
      entry will be replaced. If MERGE, the entry will be merged with the existing
      one (if the entry is a file, and a file exists, the file will be replaced).

      This method invalidates iterator to this tree, to the parent tree of the given
      entry, and to subtrees of this tree if the insert policy is MERGE.

      :param entry: Entry to move.
      :param path: The path to move the entry to. If the path ends with / or \, the entry will
                   be inserted in the corresponding directory instead of replacing it. If the
                   given path is empty (`""`), this is equivalent to `insert()`.
      :param policy: Policy to use to resolve conflicts.

      :returns: True if the entry was moved correctly, False otherwise.



   .. py:method:: pathTo(entry: FileTreeEntry, sep: str = '\\') -> str

      Retrieve the path from this tree to the given entry.

      :param entry: The entry to reach, must be in this tree.
      :param sep: The type of separator to use to create the path.

      :returns: The path from this tree to the given entry, including the name of the entry, or

      an empty string if the given entry was not found under this tree.



   .. py:method:: remove(name: str) -> bool
                  remove(entry: FileTreeEntry) -> bool

      Delete the given entry.

      :param entry: Entry to delete. The entry must belongs to this tree (and not to a subtree).

      :returns: True if the entry was deleted, False otherwise.



   .. py:method:: removeAll(names: Sequence[str]) -> int

      Delete the entries with the given names from the tree.

      This method does not recurse into subtrees, so only entries accessible
      directly from this tree will be removed. This method invalidates iterators.

      :param names: Names of the entries to delete.

      :returns: The number of deleted entry.



   .. py:method:: removeIf(filter: Callable[[FileTreeEntry], bool]) -> int

      Delete entries matching the given predicate from the tree.

      This method does not recurse into subtrees, so only entries accessible
      directly from this tree will be removed. This method invalidates iterators.

      :param filter: Predicate that should return true for entries to delete.

      :returns: The number of deleted entry.



   .. py:method:: walk(callback: Callable[[str, FileTreeEntry], IFileTree], sep: str = '\\') -> None

      Walk this tree, calling the given function for each entry in it.

      The given callback will be called with two parameters: the path from this tree to the given entry
      (with a trailing separator, not including the entry name), and the actual entry. The method returns
      a `WalkReturn` object to indicates what to do.

      :param callback: Method to call for each entry in the tree.
      :param sep: Type of separator to use to construct the path.



Data Archive Classes
--------------------

.. py:class:: BSAInvalidation

   Archive invalidation interface for BSA files.


.. py:class:: DataArchives  

   Interface for managing game data archives.